
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 15/09/2022 - 16:08
// This is a partial class file. The other one is ComprasDetalleMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using monaguaRules.Entities;
using monaguaRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace monaguaRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ComprasDetalleMapper : BaseGateway<ComprasDetalle, ComprasDetalleList>, IGenericGateway
    {


        #region "Singleton"

        static ComprasDetalleMapper _instance;

        private ComprasDetalleMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ComprasDetalleMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ComprasDetalleMapper();
                else {
                    ComprasDetalleMapper inst = HttpContext.Current.Items["monaguaRules.ComprasDetalleMapperSingleton"] as ComprasDetalleMapper;
                    if (inst == null) {
                        inst = new ComprasDetalleMapper();
                        HttpContext.Current.Items.Add("monaguaRules.ComprasDetalleMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdCompraDetalle"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ComprasDetalle);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ComprasDetalle"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ComprasDetalleMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ComprasDetalle entity)
        {
            
            IMappeableComprasDetalleObject ComprasDetalle = (IMappeableComprasDetalleObject)entity;
            ComprasDetalle.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetInt32(3),
reader.GetDateTime(4),
(reader.IsDBNull(5)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(5));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ComprasDetalle entity)
        {

            IMappeableComprasDetalleObject ComprasDetalle = (IMappeableComprasDetalleObject)entity;
            return ComprasDetalle.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ComprasDetalle entity)
        {

            IMappeableComprasDetalleObject ComprasDetalle = (IMappeableComprasDetalleObject)entity;
            return ComprasDetalle.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ComprasDetalle entity)
        {

            IMappeableComprasDetalleObject ComprasDetalle = (IMappeableComprasDetalleObject)entity;
            return ComprasDetalle.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ComprasDetalle entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableComprasDetalleObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ComprasDetalle entity)
        {
            Entities.Actividades ActividadesEntity = null; // Lazy load
Entities.Compras ComprasEntity = null; // Lazy load
            ((IMappeableComprasDetalle)entity).CompleteEntity(ActividadesEntity, ComprasEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a ComprasDetalle by execute a SQL Query Text
        /// </summary>
        public ComprasDetalle GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ComprasDetalleList by execute a SQL Query Text
        /// </summary>
        public ComprasDetalleList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalle GetOne(System.Int32 IdCompraDetalle)
        {
            return base.GetOne(new ComprasDetalle(IdCompraDetalle));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetByActividades(DbTransaction transaction, System.Int32 IdActividad)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetByActividades", IdActividad);
        }

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetByActividades(DbTransaction transaction, IUniqueIdentifiable Actividades)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetByActividades", Actividades.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetByCompras(DbTransaction transaction, System.Int32 IdCompra)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetByCompras", IdCompra);
        }

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetByCompras(DbTransaction transaction, IUniqueIdentifiable Compras)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetByCompras", Compras.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetByActividades(System.Int32 IdActividad)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetByActividades", IdActividad);
        }

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetByActividades(IUniqueIdentifiable Actividades)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetByActividades", Actividades.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetByCompras(System.Int32 IdCompra)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetByCompras", IdCompra);
        }

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetByCompras(IUniqueIdentifiable Compras)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetByCompras", Compras.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdCompraDetalle)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_Delete", IdCompraDetalle);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdCompraDetalle)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_Delete", IdCompraDetalle);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByActividades(System.Int32 IdActividad)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_DeleteByActividades", IdActividad);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByActividades(DbTransaction transaction, System.Int32 IdActividad)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_DeleteByActividades", IdActividad);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByActividades(IUniqueIdentifiable Actividades)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_DeleteByActividades", Actividades.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByActividades(DbTransaction transaction, IUniqueIdentifiable Actividades)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_DeleteByActividades", Actividades.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCompras(System.Int32 IdCompra)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_DeleteByCompras", IdCompra);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCompras(DbTransaction transaction, System.Int32 IdCompra)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_DeleteByCompras", IdCompra);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCompras(IUniqueIdentifiable Compras)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_DeleteByCompras", Compras.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCompras(DbTransaction transaction, IUniqueIdentifiable Compras)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_DeleteByCompras", Compras.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetComprasByActividad(System.Int32 idactividad) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetComprasByActividad" , idactividad);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetComprasByActividad(DbTransaction transaction , System.Int32 idactividad) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetComprasByActividad" , idactividad);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace monaguaRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ComprasDetalleMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public monaguaRules.Mappers.ComprasDetalleMapper Instance()
        {
            return monaguaRules.Mappers.ComprasDetalleMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ComprasDetalleEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ComprasDetalle GetOne(System.Int32 IdCompraDetalle) {
            return Instance().GetOne( IdCompraDetalle);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ComprasDetalleList by calling a Stored Procedure
        /// </summary>
        public Entities.ComprasDetalleList GetByActividades(System.Int32 IdActividad)
        {
            return Instance().GetByActividades(IdActividad);
        }

        /// <summary>
        /// Get a ComprasDetalleList by calling a Stored Procedure
        /// </summary>
        public Entities.ComprasDetalleList GetByActividades(IUniqueIdentifiable Actividades)
        {
            return Instance().GetByActividades(Actividades);
        }

    

        /// <summary>
        /// Get a ComprasDetalleList by calling a Stored Procedure
        /// </summary>
        public Entities.ComprasDetalleList GetByCompras(System.Int32 IdCompra)
        {
            return Instance().GetByCompras(IdCompra);
        }

        /// <summary>
        /// Get a ComprasDetalleList by calling a Stored Procedure
        /// </summary>
        public Entities.ComprasDetalleList GetByCompras(IUniqueIdentifiable Compras)
        {
            return Instance().GetByCompras(Compras);
        }

    

       

        /// <summary>
        /// Delete children for ComprasDetalle
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ComprasDetalle entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ComprasDetalle by Actividades
        /// </summary>
        public void DeleteByActividades(System.Int32 IdActividad)
        {
            Instance().DeleteByActividades(IdActividad);
        }

        /// <summary>
        /// Delete ComprasDetalle by Actividades
        /// </summary>
        public void DeleteByActividades(IUniqueIdentifiable Actividades)
        {
            Instance().DeleteByActividades(Actividades);
        }

    

        /// <summary>
        /// Delete ComprasDetalle by Compras
        /// </summary>
        public void DeleteByCompras(System.Int32 IdCompra)
        {
            Instance().DeleteByCompras(IdCompra);
        }

        /// <summary>
        /// Delete ComprasDetalle by Compras
        /// </summary>
        public void DeleteByCompras(IUniqueIdentifiable Compras)
        {
            Instance().DeleteByCompras(Compras);
        }

    
        /// <summary>
        /// Delete ComprasDetalle 
        /// </summary>
        public void Delete(System.Int32 IdCompraDetalle){
            Instance().Delete(IdCompraDetalle);
        }

        /// <summary>
        /// Delete ComprasDetalle 
        /// </summary>
        public void Delete(Entities.ComprasDetalle entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ComprasDetalle  
        /// </summary>
        public void Save(Entities.ComprasDetalle entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ComprasDetalle 
        /// </summary>
        public void Insert(Entities.ComprasDetalle entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ComprasDetalle 
        /// </summary>
        public Entities.ComprasDetalleList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ComprasDetalle 
        /// </summary>
        public void Save(System.Int32 IdCompraDetalle, System.Int32 IdCompra, System.Int32 IdActividad, System.Int32 Cantidad, System.DateTime FechaHora, System.Decimal MontoActividad){
            Entities.ComprasDetalle entity = Instance().GetOne(IdCompraDetalle);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdCompraDetalle", IdCompraDetalle));

            entity.IdCompra = IdCompra;
            entity.IdActividad = IdActividad;
            entity.Cantidad = Cantidad;
            entity.FechaHora = FechaHora;
            entity.MontoActividad = MontoActividad;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ComprasDetalle
        /// </summary>
        public void Insert(System.Int32 IdCompra, System.Int32 IdActividad, System.Int32 Cantidad, System.DateTime FechaHora, System.Decimal MontoActividad){
            Entities.ComprasDetalle entity = new Entities.ComprasDetalle();

            entity.IdCompra = IdCompra;
            entity.IdActividad = IdActividad;
            entity.Cantidad = Cantidad;
            entity.FechaHora = FechaHora;
            entity.MontoActividad = MontoActividad;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ComprasDetalleList GetComprasByActividad(System.Int32 idactividad) {
            
                return Instance().GetComprasByActividad( idactividad);
        }


        


    }
}





namespace monaguaRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ComprasDetalleLoader<T> : BaseLoader< T, ComprasDetalle, ObjectList<T>>, IGenericGateway where T : ComprasDetalle, new()
    {

        #region "Singleton"

        static ComprasDetalleLoader<T> _instance;

        private ComprasDetalleLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ComprasDetalleLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ComprasDetalleLoader<T>();
                else {
                    ComprasDetalleLoader<T> inst = HttpContext.Current.Items["monaguaRules.ComprasDetalleLoaderSingleton"] as ComprasDetalleLoader<T>;
                    if (inst == null) {
                        inst = new ComprasDetalleLoader<T>();
                        HttpContext.Current.Items.Add("monaguaRules.ComprasDetalleLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdCompraDetalle"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ComprasDetalle);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ComprasDetalle"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ComprasDetalle entity)
        {
            
            IMappeableComprasDetalleObject ComprasDetalle = (IMappeableComprasDetalleObject)entity;
            ComprasDetalle.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetInt32(3),
reader.GetDateTime(4),
(reader.IsDBNull(5)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(5));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.Actividades ActividadesEntity = null; // Lazy load
Entities.Compras ComprasEntity = null; // Lazy load
            ((IMappeableComprasDetalle)entity).CompleteEntity(ActividadesEntity, ComprasEntity);
        }


        



        /// <summary>
        /// Get a ComprasDetalle by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ComprasDetalleList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdCompraDetalle)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetOne", IdCompraDetalle);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByActividades(DbTransaction transaction, System.Int32 IdActividad)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetByActividades", IdActividad);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByActividades(DbTransaction transaction, IUniqueIdentifiable Actividades)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetByActividades", Actividades.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCompras(DbTransaction transaction, System.Int32 IdCompra)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetByCompras", IdCompra);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCompras(DbTransaction transaction, IUniqueIdentifiable Compras)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetByCompras", Compras.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByActividades(System.Int32 IdActividad)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetByActividades", IdActividad);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByActividades(IUniqueIdentifiable Actividades)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetByActividades", Actividades.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCompras(System.Int32 IdCompra)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetByCompras", IdCompra);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCompras(IUniqueIdentifiable Compras)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetByCompras", Compras.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetComprasByActividad(System.Int32 idactividad) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ComprasDetalle_GetComprasByActividad" , idactividad);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetComprasByActividad(DbTransaction transaction , System.Int32 idactividad) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ComprasDetalle_GetComprasByActividad" , idactividad);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





