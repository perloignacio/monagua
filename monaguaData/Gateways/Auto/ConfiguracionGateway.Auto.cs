
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 22/11/2022 - 11:25
// This is a partial class file. The other one is ConfiguracionGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using monaguaRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace monaguaRules.Gateways
{

    public partial class ConfiguracionGateway : BaseGateway<ConfiguracionObject, ConfiguracionObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ConfiguracionGateway _instance;

        private ConfiguracionGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ConfiguracionGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ConfiguracionGateway();
                else {
                    ConfiguracionGateway inst = HttpContext.Current.Items["monaguaRules.ConfiguracionGatewaySingleton"] as ConfiguracionGateway;
                    if (inst == null) {
                        inst = new ConfiguracionGateway();
                        HttpContext.Current.Items.Add("monaguaRules.ConfiguracionGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Configuracion"; }
        }

        protected override string RuleName
        {
            get {return typeof(ConfiguracionGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ConfiguracionObject entity)
        {
            
            IMappeableConfiguracionObject Configuracion = (IMappeableConfiguracionObject)entity;
            Configuracion.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ConfiguracionObject entity)
        {

            IMappeableConfiguracionObject Configuracion = (IMappeableConfiguracionObject)entity;
            return Configuracion.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ConfiguracionObject entity)
        {

            IMappeableConfiguracionObject Configuracion = (IMappeableConfiguracionObject)entity;
            return Configuracion.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ConfiguracionObject entity)
        {

            IMappeableConfiguracionObject Configuracion = (IMappeableConfiguracionObject)entity;
            return Configuracion.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ConfiguracionObject row, object[] parameters)
        {
            ((IMappeableConfiguracionObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a ConfiguracionObject by execute a SQL Query Text
        /// </summary>
        public ConfiguracionObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ConfiguracionObjectList by execute a SQL Query Text
        /// </summary>
        public ConfiguracionObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ConfiguracionObject by calling a Stored Procedure
        /// </summary>
        public ConfiguracionObject GetOne(System.Int32 IdConfig)
        {
            return base.GetOne(new ConfiguracionObject(IdConfig));
        }


        // GetBy Objects and Params
            


        

        

        /// <summary>
        /// Delete Configuracion
        /// </summary>
        public void Delete(System.Int32 IdConfig)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Configuracion_Delete", IdConfig);
        }

        /// <summary>
        /// Delete Configuracion
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdConfig)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Configuracion_Delete", IdConfig);
        }

            

        


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public ConfiguracionObject GetByClave(System.String clave) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Configuracion_GetByClave" , clave);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ConfiguracionObject GetByClave(DbTransaction transaction , System.String clave) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Configuracion_GetByClave" , clave);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








