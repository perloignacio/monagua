
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 31/08/2022 - 14:49
// This is a partial class file. The other one is ActividadesGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using monaguaRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace monaguaRules.Gateways
{

    public partial class ActividadesGateway : BaseGateway<ActividadesObject, ActividadesObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ActividadesGateway _instance;

        private ActividadesGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ActividadesGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ActividadesGateway();
                else {
                    ActividadesGateway inst = HttpContext.Current.Items["monaguaRules.ActividadesGatewaySingleton"] as ActividadesGateway;
                    if (inst == null) {
                        inst = new ActividadesGateway();
                        HttpContext.Current.Items.Add("monaguaRules.ActividadesGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Actividades"; }
        }

        protected override string RuleName
        {
            get {return typeof(ActividadesGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ActividadesObject entity)
        {
            
            IMappeableActividadesObject Actividades = (IMappeableActividadesObject)entity;
            Actividades.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
reader.GetDecimal(7),
(reader.IsDBNull(8)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(8),
reader.GetBoolean(9),
reader.GetBoolean(10),
reader.GetBoolean(11),
(reader.IsDBNull(12)) ? "" : reader.GetString(12),
(reader.IsDBNull(13)) ? "" : reader.GetString(13),
(reader.IsDBNull(14)) ? "" : reader.GetString(14),
(reader.IsDBNull(15)) ? "" : reader.GetString(15),
reader.GetDecimal(16),
reader.GetInt32(17),
reader.GetInt32(18),
reader.GetBoolean(19),
(reader.IsDBNull(20)) ? "" : reader.GetString(20),
reader.GetBoolean(21));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ActividadesObject entity)
        {

            IMappeableActividadesObject Actividades = (IMappeableActividadesObject)entity;
            return Actividades.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ActividadesObject entity)
        {

            IMappeableActividadesObject Actividades = (IMappeableActividadesObject)entity;
            return Actividades.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ActividadesObject entity)
        {

            IMappeableActividadesObject Actividades = (IMappeableActividadesObject)entity;
            return Actividades.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ActividadesObject row, object[] parameters)
        {
            ((IMappeableActividadesObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a ActividadesObject by execute a SQL Query Text
        /// </summary>
        public ActividadesObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ActividadesObjectList by execute a SQL Query Text
        /// </summary>
        public ActividadesObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ActividadesObject by calling a Stored Procedure
        /// </summary>
        public ActividadesObject GetOne(System.Int32 IdActividad)
        {
            return base.GetOne(new ActividadesObject(IdActividad));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a ActividadesObjectList by calling a Stored Procedure
        /// </summary>
        public ActividadesObjectList GetByCategorias(DbTransaction transaction,System.Int32 IdCategoria)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_GetByCategorias", IdCategoria);
        }

        /// <summary>
        /// Get a ActividadesObjectList by calling a Stored Procedure
        /// </summary>
        public ActividadesObjectList GetByCategorias(DbTransaction transaction, IUniqueIdentifiable Categorias)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_GetByCategorias", Categorias.Identifier());
        }

    

        /// <summary>
        /// Get a ActividadesObjectList by calling a Stored Procedure
        /// </summary>
        public ActividadesObjectList GetByPrestadores(DbTransaction transaction,System.Int32 IdPrestador)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_GetByPrestadores", IdPrestador);
        }

        /// <summary>
        /// Get a ActividadesObjectList by calling a Stored Procedure
        /// </summary>
        public ActividadesObjectList GetByPrestadores(DbTransaction transaction, IUniqueIdentifiable Prestadores)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_GetByPrestadores", Prestadores.Identifier());
        }

    

        

        /// <summary>
        /// Get a ActividadesObjectList by calling a Stored Procedure
        /// </summary>
        public ActividadesObjectList GetByCategorias(System.Int32 IdCategoria)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Actividades_GetByCategorias", IdCategoria);
        }

        /// <summary>
        /// Get a ActividadesObjectList by calling a Stored Procedure
        /// </summary>
        public ActividadesObjectList GetByCategorias(IUniqueIdentifiable Categorias)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Actividades_GetByCategorias", Categorias.Identifier());
        }

    

        /// <summary>
        /// Get a ActividadesObjectList by calling a Stored Procedure
        /// </summary>
        public ActividadesObjectList GetByPrestadores(System.Int32 IdPrestador)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Actividades_GetByPrestadores", IdPrestador);
        }

        /// <summary>
        /// Get a ActividadesObjectList by calling a Stored Procedure
        /// </summary>
        public ActividadesObjectList GetByPrestadores(IUniqueIdentifiable Prestadores)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Actividades_GetByPrestadores", Prestadores.Identifier());
        }

    

        /// <summary>
        /// Delete Actividades
        /// </summary>
        public void Delete(System.Int32 IdActividad)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Actividades_Delete", IdActividad);
        }

        /// <summary>
        /// Delete Actividades
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdActividad)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_Delete", IdActividad);
        }

            

        

        /// <summary>
        /// Delete Actividades by Categorias
        /// </summary>
        public void DeleteByCategorias(System.Int32 IdCategoria)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Actividades_DeleteByCategorias", IdCategoria);
        }

        /// <summary>
        /// Delete Actividades by Categorias
        /// </summary>
        public void DeleteByCategorias(DbTransaction transaction, System.Int32 IdCategoria)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_DeleteByCategorias", IdCategoria);
        }

        /// <summary>
        /// Delete Actividades by Categorias
        /// </summary>
        public void DeleteByCategorias(IUniqueIdentifiable Categorias)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Actividades_DeleteByCategorias", Categorias.Identifier());
        }

        /// <summary>
        /// Delete Actividades by Categorias
        /// </summary>
        public void DeleteByCategorias(DbTransaction transaction, IUniqueIdentifiable Categorias)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_DeleteByCategorias", Categorias.Identifier());
        }


    

        /// <summary>
        /// Delete Actividades by Prestadores
        /// </summary>
        public void DeleteByPrestadores(System.Int32 IdPrestador)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Actividades_DeleteByPrestadores", IdPrestador);
        }

        /// <summary>
        /// Delete Actividades by Prestadores
        /// </summary>
        public void DeleteByPrestadores(DbTransaction transaction, System.Int32 IdPrestador)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_DeleteByPrestadores", IdPrestador);
        }

        /// <summary>
        /// Delete Actividades by Prestadores
        /// </summary>
        public void DeleteByPrestadores(IUniqueIdentifiable Prestadores)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Actividades_DeleteByPrestadores", Prestadores.Identifier());
        }

        /// <summary>
        /// Delete Actividades by Prestadores
        /// </summary>
        public void DeleteByPrestadores(DbTransaction transaction, IUniqueIdentifiable Prestadores)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Actividades_DeleteByPrestadores", Prestadores.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








