
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 15/09/2022 - 16:08
// This is a partial class file. The other one is ActividadesHorariosEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using monaguaRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace monaguaRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ActividadesHorarios : Objects.ActividadesHorariosObject, IMappeableActividadesHorarios, IEquatable<ActividadesHorarios>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorarios()
            :base()
        {
            if (_ActividadesEntity == null) _ActividadesEntity = new Entities.Actividades();
if (_TipoRepeticionesEntity == null) _TipoRepeticionesEntity = new Entities.TipoRepeticiones();

        }

        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorarios(
			System.Int32 IdHorario)
            : base()
        {

			_IdHorario = IdHorario;

            if (_ActividadesEntity == null) _ActividadesEntity = new Entities.Actividades();
if (_TipoRepeticionesEntity == null) _TipoRepeticionesEntity = new Entities.TipoRepeticiones();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorarios(
			System.Int32 IdHorario,
			System.Int32 IdActividad,
			System.Int32 IdTipoRepeticion,
			System.DateTime HoraDesde,
			System.DateTime HoraHasta,
			System.Boolean Activa,
			System.Nullable<System.Int32> Capacidad,
			System.DateTime FechaInicio,
			System.Nullable<System.DateTime> FechaFin)
            : base()
        {

			_IdHorario = IdHorario;
			_IdActividad = IdActividad;
			_IdTipoRepeticion = IdTipoRepeticion;
			_HoraDesde = HoraDesde;
			_HoraHasta = HoraHasta;
			_Activa = Activa;
			_Capacidad = Capacidad;
			_FechaInicio = FechaInicio;
			_FechaFin = FechaFin;

            if (_ActividadesEntity == null) _ActividadesEntity = new Entities.Actividades();
if (_TipoRepeticionesEntity == null) _TipoRepeticionesEntity = new Entities.TipoRepeticiones();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.Actividades _ActividadesEntity;
/// <summary>
/// 
/// </summary>
protected Entities.TipoRepeticiones _TipoRepeticionesEntity;

        #endregion

        #region "Properties"
        
bool _ActividadesEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Actividades ActividadesEntity
        {
            get
            {
                if (_ActividadesEntity== null  && ! _ActividadesEntityFetched ) {
_ActividadesEntityFetched = true;
Entities.Actividades _ActividadesEntityTemp = new Entities.Actividades(this.IdActividad); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Actividades));
 _ActividadesEntity = lazyProvider.GetEntity(typeof(Entities.Actividades), _ActividadesEntityTemp) as Entities.Actividades;
}

                return _ActividadesEntity;
            }
            set
            {
                base.PropertyModified();
                _ActividadesEntity = value;
                if (value != null) {
   _IdActividad = value.IdActividad;

} else {
   _IdActividad = System.Int32.MinValue;

}

            }
        }
        
bool _TipoRepeticionesEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.TipoRepeticiones TipoRepeticionesEntity
        {
            get
            {
                if (_TipoRepeticionesEntity== null  && ! _TipoRepeticionesEntityFetched ) {
_TipoRepeticionesEntityFetched = true;
Entities.TipoRepeticiones _TipoRepeticionesEntityTemp = new Entities.TipoRepeticiones(this.IdTipoRepeticion); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.TipoRepeticiones));
 _TipoRepeticionesEntity = lazyProvider.GetEntity(typeof(Entities.TipoRepeticiones), _TipoRepeticionesEntityTemp) as Entities.TipoRepeticiones;
}

                return _TipoRepeticionesEntity;
            }
            set
            {
                base.PropertyModified();
                _TipoRepeticionesEntity = value;
                if (value != null) {
   _IdTipoRepeticion = value.IdTipoRepeticion;

} else {
   _IdTipoRepeticion = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new ActividadesHorarios OriginalValue()
        {
            return (ActividadesHorarios)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            ActividadesHorarios newObject;            
            

            newObject = (ActividadesHorarios)this.MemberwiseClone();
            // Entities
                         
            if (this._ActividadesEntity != null)
            {
                newObject._ActividadesEntity = (Entities.Actividades)((ICloneable)this._ActividadesEntity).Clone();
            }
                         
            if (this._TipoRepeticionesEntity != null)
            {
                newObject._TipoRepeticionesEntity = (Entities.TipoRepeticiones)((ICloneable)this._TipoRepeticionesEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            ActividadesHorarios newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (ActividadesHorarios)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._ActividadesEntity != null)
                {
                    newOriginalValue._ActividadesEntity = (Entities.Actividades)((ICloneable)this.OriginalValue()._ActividadesEntity).Clone();
                }
                             
                if (this.OriginalValue()._TipoRepeticionesEntity != null)
                {
                    newOriginalValue._TipoRepeticionesEntity = (Entities.TipoRepeticiones)((ICloneable)this.OriginalValue()._TipoRepeticionesEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableActividadesHorarios.CompleteEntity(Entities.Actividades ActividadesEntity, Entities.TipoRepeticiones TipoRepeticionesEntity)
        {
        _ActividadesEntity = ActividadesEntity;
_TipoRepeticionesEntity = TipoRepeticionesEntity;
        }
        
        bool IMappeableActividadesHorarios.IsActividadesEntityNull()
        {
            return (_ActividadesEntity == null);
        }
        
        bool IMappeableActividadesHorarios.IsTipoRepeticionesEntityNull()
        {
            return (_TipoRepeticionesEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableActividadesHorarios.SetFKValuesForChilds(ActividadesHorarios entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(ActividadesHorarios other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableActividadesHorarios
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.Actividades ActividadesEntity, Entities.TipoRepeticiones TipoRepeticionesEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsActividadesEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsTipoRepeticionesEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(ActividadesHorarios entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class ActividadesHorariosList : ObjectList<ActividadesHorarios>
    {
    }
}
namespace monaguaRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class ActividadesHorariosListView
        : ObjectListView<Entities.ActividadesHorarios>
    {
        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorariosListView(Entities.ActividadesHorariosList list): base(list)
        {
        }
    }
}


