
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 31/08/2022 - 14:49
// This is a partial class file. The other one is UsuariosEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using monaguaRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace monaguaRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class Usuarios : Objects.UsuariosObject, IMappeableUsuarios, IEquatable<Usuarios>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public Usuarios()
            :base()
        {
            
        }

        /// <summary>
        /// 
        /// </summary>
        public Usuarios(
			System.Int32 IdUsuario)
            : base()
        {

			_IdUsuario = IdUsuario;

            
            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public Usuarios(
			System.Int32 IdUsuario,
			System.String Usuario,
			System.String Contra,
			System.String Nombre,
			System.String Apellido,
			System.String Email,
			System.Nullable<System.Int32> IdCliente,
			System.Nullable<System.Int32> IdPrestador,
			System.Boolean Activo,
			System.String Telefono)
            : base()
        {

			_IdUsuario = IdUsuario;
			_Usuario = Usuario;
			_Contra = Contra;
			_Nombre = Nombre;
			_Apellido = Apellido;
			_Email = Email;
			_IdCliente = IdCliente;
			_IdPrestador = IdPrestador;
			_Activo = Activo;
			_Telefono = Telefono;

            
            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.Clientes _ClientesEntity;
/// <summary>
/// 
/// </summary>
protected Entities.Prestadores _PrestadoresEntity;

        #endregion

        #region "Properties"
        
bool _ClientesEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Clientes ClientesEntity
        {
            get
            {
                if (_ClientesEntity== null  && this.IdCliente.HasValue && ! _ClientesEntityFetched ) {
_ClientesEntityFetched = true;
Entities.Clientes _ClientesEntityTemp = new Entities.Clientes(this.IdCliente.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Clientes));
 _ClientesEntity = lazyProvider.GetEntity(typeof(Entities.Clientes), _ClientesEntityTemp) as Entities.Clientes;
}

                return _ClientesEntity;
            }
            set
            {
                base.PropertyModified();
                _ClientesEntity = value;
                if (value != null) {
   _IdCliente = value.IdCliente;

} else {
   _IdCliente = null;

}

            }
        }
        
bool _PrestadoresEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Prestadores PrestadoresEntity
        {
            get
            {
                if (_PrestadoresEntity== null  && this.IdPrestador.HasValue && ! _PrestadoresEntityFetched ) {
_PrestadoresEntityFetched = true;
Entities.Prestadores _PrestadoresEntityTemp = new Entities.Prestadores(this.IdPrestador.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Prestadores));
 _PrestadoresEntity = lazyProvider.GetEntity(typeof(Entities.Prestadores), _PrestadoresEntityTemp) as Entities.Prestadores;
}

                return _PrestadoresEntity;
            }
            set
            {
                base.PropertyModified();
                _PrestadoresEntity = value;
                if (value != null) {
   _IdPrestador = value.IdPrestador;

} else {
   _IdPrestador = null;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new Usuarios OriginalValue()
        {
            return (Usuarios)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            Usuarios newObject;            
            

            newObject = (Usuarios)this.MemberwiseClone();
            // Entities
                         
            if (this._ClientesEntity != null)
            {
                newObject._ClientesEntity = (Entities.Clientes)((ICloneable)this._ClientesEntity).Clone();
            }
                         
            if (this._PrestadoresEntity != null)
            {
                newObject._PrestadoresEntity = (Entities.Prestadores)((ICloneable)this._PrestadoresEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            Usuarios newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (Usuarios)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._ClientesEntity != null)
                {
                    newOriginalValue._ClientesEntity = (Entities.Clientes)((ICloneable)this.OriginalValue()._ClientesEntity).Clone();
                }
                             
                if (this.OriginalValue()._PrestadoresEntity != null)
                {
                    newOriginalValue._PrestadoresEntity = (Entities.Prestadores)((ICloneable)this.OriginalValue()._PrestadoresEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableUsuarios.CompleteEntity(Entities.Clientes ClientesEntity, Entities.Prestadores PrestadoresEntity)
        {
        _ClientesEntity = ClientesEntity;
_PrestadoresEntity = PrestadoresEntity;
        }
        
        bool IMappeableUsuarios.IsClientesEntityNull()
        {
            return (_ClientesEntity == null);
        }
        
        bool IMappeableUsuarios.IsPrestadoresEntityNull()
        {
            return (_PrestadoresEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableUsuarios.SetFKValuesForChilds(Usuarios entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(Usuarios other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableUsuarios
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.Clientes ClientesEntity, Entities.Prestadores PrestadoresEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsClientesEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsPrestadoresEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(Usuarios entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class UsuariosList : ObjectList<Usuarios>
    {
    }
}
namespace monaguaRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class UsuariosListView
        : ObjectListView<Entities.Usuarios>
    {
        /// <summary>
        /// 
        /// </summary>
        public UsuariosListView(Entities.UsuariosList list): base(list)
        {
        }
    }
}


