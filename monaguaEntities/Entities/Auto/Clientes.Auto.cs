
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 20/5/2022 - 04:29 p.Â m.
// This is a partial class file. The other one is ClientesEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using monaguaRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace monaguaRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class Clientes : Objects.ClientesObject, IMappeableClientes, IEquatable<Clientes>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public Clientes()
            :base()
        {
            
        }

        /// <summary>
        /// 
        /// </summary>
        public Clientes(
			System.Int32 IdCliente)
            : base()
        {

			_IdCliente = IdCliente;

            
            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public Clientes(
			System.Int32 IdCliente,
			System.DateTime FechaRegistro,
			System.String Nombre,
			System.String Apellido,
			System.String Email,
			System.DateTime FechaNacimiento,
			System.Boolean Novedades,
			System.Boolean Politicas,
			System.Nullable<System.Int32> IdPais,
			System.Nullable<System.Int32> IdProvincia,
			System.Nullable<System.Int32> IdLocalidad,
			System.String Sexo,
			System.Boolean Activo,
			System.String Telefono)
            : base()
        {

			_IdCliente = IdCliente;
			_FechaRegistro = FechaRegistro;
			_Nombre = Nombre;
			_Apellido = Apellido;
			_Email = Email;
			_FechaNacimiento = FechaNacimiento;
			_Novedades = Novedades;
			_Politicas = Politicas;
			_IdPais = IdPais;
			_IdProvincia = IdProvincia;
			_IdLocalidad = IdLocalidad;
			_Sexo = Sexo;
			_Activo = Activo;
			_Telefono = Telefono;

            
            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.Localidades _LocalidadesEntity;
/// <summary>
/// 
/// </summary>
protected Entities.Paises _PaisesEntity;
/// <summary>
/// 
/// </summary>
protected Entities.Provincias _ProvinciasEntity;

        #endregion

        #region "Properties"
        
bool _LocalidadesEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Localidades LocalidadesEntity
        {
            get
            {
                if (_LocalidadesEntity== null  && this.IdLocalidad.HasValue && ! _LocalidadesEntityFetched ) {
_LocalidadesEntityFetched = true;
Entities.Localidades _LocalidadesEntityTemp = new Entities.Localidades(this.IdLocalidad.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Localidades));
 _LocalidadesEntity = lazyProvider.GetEntity(typeof(Entities.Localidades), _LocalidadesEntityTemp) as Entities.Localidades;
}

                return _LocalidadesEntity;
            }
            set
            {
                base.PropertyModified();
                _LocalidadesEntity = value;
                if (value != null) {
   _IdLocalidad = value.IdLocalidad;

} else {
   _IdLocalidad = null;

}

            }
        }
        
bool _PaisesEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Paises PaisesEntity
        {
            get
            {
                if (_PaisesEntity== null  && this.IdPais.HasValue && ! _PaisesEntityFetched ) {
_PaisesEntityFetched = true;
Entities.Paises _PaisesEntityTemp = new Entities.Paises(this.IdPais.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Paises));
 _PaisesEntity = lazyProvider.GetEntity(typeof(Entities.Paises), _PaisesEntityTemp) as Entities.Paises;
}

                return _PaisesEntity;
            }
            set
            {
                base.PropertyModified();
                _PaisesEntity = value;
                if (value != null) {
   _IdPais = value.IdPais;

} else {
   _IdPais = null;

}

            }
        }
        
bool _ProvinciasEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Provincias ProvinciasEntity
        {
            get
            {
                if (_ProvinciasEntity== null  && this.IdProvincia.HasValue && ! _ProvinciasEntityFetched ) {
_ProvinciasEntityFetched = true;
Entities.Provincias _ProvinciasEntityTemp = new Entities.Provincias(this.IdProvincia.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Provincias));
 _ProvinciasEntity = lazyProvider.GetEntity(typeof(Entities.Provincias), _ProvinciasEntityTemp) as Entities.Provincias;
}

                return _ProvinciasEntity;
            }
            set
            {
                base.PropertyModified();
                _ProvinciasEntity = value;
                if (value != null) {
   _IdProvincia = value.IdProvincia;

} else {
   _IdProvincia = null;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new Clientes OriginalValue()
        {
            return (Clientes)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            Clientes newObject;            
            

            newObject = (Clientes)this.MemberwiseClone();
            // Entities
                         
            if (this._LocalidadesEntity != null)
            {
                newObject._LocalidadesEntity = (Entities.Localidades)((ICloneable)this._LocalidadesEntity).Clone();
            }
                         
            if (this._PaisesEntity != null)
            {
                newObject._PaisesEntity = (Entities.Paises)((ICloneable)this._PaisesEntity).Clone();
            }
                         
            if (this._ProvinciasEntity != null)
            {
                newObject._ProvinciasEntity = (Entities.Provincias)((ICloneable)this._ProvinciasEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            Clientes newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (Clientes)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._LocalidadesEntity != null)
                {
                    newOriginalValue._LocalidadesEntity = (Entities.Localidades)((ICloneable)this.OriginalValue()._LocalidadesEntity).Clone();
                }
                             
                if (this.OriginalValue()._PaisesEntity != null)
                {
                    newOriginalValue._PaisesEntity = (Entities.Paises)((ICloneable)this.OriginalValue()._PaisesEntity).Clone();
                }
                             
                if (this.OriginalValue()._ProvinciasEntity != null)
                {
                    newOriginalValue._ProvinciasEntity = (Entities.Provincias)((ICloneable)this.OriginalValue()._ProvinciasEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableClientes.CompleteEntity(Entities.Localidades LocalidadesEntity, Entities.Paises PaisesEntity, Entities.Provincias ProvinciasEntity)
        {
        _LocalidadesEntity = LocalidadesEntity;
_PaisesEntity = PaisesEntity;
_ProvinciasEntity = ProvinciasEntity;
        }
        
        bool IMappeableClientes.IsLocalidadesEntityNull()
        {
            return (_LocalidadesEntity == null);
        }
        
        bool IMappeableClientes.IsPaisesEntityNull()
        {
            return (_PaisesEntity == null);
        }
        
        bool IMappeableClientes.IsProvinciasEntityNull()
        {
            return (_ProvinciasEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableClientes.SetFKValuesForChilds(Clientes entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(Clientes other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableClientes
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.Localidades LocalidadesEntity, Entities.Paises PaisesEntity, Entities.Provincias ProvinciasEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsLocalidadesEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsPaisesEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsProvinciasEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(Clientes entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class ClientesList : ObjectList<Clientes>
    {
    }
}
namespace monaguaRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class ClientesListView
        : ObjectListView<Entities.Clientes>
    {
        /// <summary>
        /// 
        /// </summary>
        public ClientesListView(Entities.ClientesList list): base(list)
        {
        }
    }
}


