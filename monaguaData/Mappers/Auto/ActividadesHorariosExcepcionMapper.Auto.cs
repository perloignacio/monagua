
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 22/11/2022 - 11:25
// This is a partial class file. The other one is ActividadesHorariosExcepcionMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using monaguaRules.Entities;
using monaguaRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace monaguaRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ActividadesHorariosExcepcionMapper : BaseGateway<ActividadesHorariosExcepcion, ActividadesHorariosExcepcionList>, IGenericGateway
    {


        #region "Singleton"

        static ActividadesHorariosExcepcionMapper _instance;

        private ActividadesHorariosExcepcionMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ActividadesHorariosExcepcionMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ActividadesHorariosExcepcionMapper();
                else {
                    ActividadesHorariosExcepcionMapper inst = HttpContext.Current.Items["monaguaRules.ActividadesHorariosExcepcionMapperSingleton"] as ActividadesHorariosExcepcionMapper;
                    if (inst == null) {
                        inst = new ActividadesHorariosExcepcionMapper();
                        HttpContext.Current.Items.Add("monaguaRules.ActividadesHorariosExcepcionMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdActividadHorarioExcepcion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ActividadesHorariosExcepcion);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ActividadesHorariosExcepcion"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ActividadesHorariosExcepcionMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ActividadesHorariosExcepcion entity)
        {
            
            IMappeableActividadesHorariosExcepcionObject ActividadesHorariosExcepcion = (IMappeableActividadesHorariosExcepcionObject)entity;
            ActividadesHorariosExcepcion.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(2),
(reader.IsDBNull(3)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(3),
(reader.IsDBNull(4)) ? new System.Nullable<System.Int32>() : reader.GetInt32(4),
reader.GetBoolean(5),
(reader.IsDBNull(6)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ActividadesHorariosExcepcion entity)
        {

            IMappeableActividadesHorariosExcepcionObject ActividadesHorariosExcepcion = (IMappeableActividadesHorariosExcepcionObject)entity;
            return ActividadesHorariosExcepcion.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ActividadesHorariosExcepcion entity)
        {

            IMappeableActividadesHorariosExcepcionObject ActividadesHorariosExcepcion = (IMappeableActividadesHorariosExcepcionObject)entity;
            return ActividadesHorariosExcepcion.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ActividadesHorariosExcepcion entity)
        {

            IMappeableActividadesHorariosExcepcionObject ActividadesHorariosExcepcion = (IMappeableActividadesHorariosExcepcionObject)entity;
            return ActividadesHorariosExcepcion.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ActividadesHorariosExcepcion entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableActividadesHorariosExcepcionObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ActividadesHorariosExcepcion entity)
        {
            Entities.ActividadesHorarios ActividadesHorariosEntity = null; // Lazy load
            ((IMappeableActividadesHorariosExcepcion)entity).CompleteEntity(ActividadesHorariosEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a ActividadesHorariosExcepcion by execute a SQL Query Text
        /// </summary>
        public ActividadesHorariosExcepcion GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ActividadesHorariosExcepcionList by execute a SQL Query Text
        /// </summary>
        public ActividadesHorariosExcepcionList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorariosExcepcion GetOne(System.Int32 IdActividadHorarioExcepcion)
        {
            return base.GetOne(new ActividadesHorariosExcepcion(IdActividadHorarioExcepcion));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorariosExcepcionList GetByActividadesHorarios(DbTransaction transaction, System.Int32 IdHorario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetByActividadesHorarios", IdHorario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorariosExcepcionList GetByActividadesHorarios(DbTransaction transaction, IUniqueIdentifiable ActividadesHorarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetByActividadesHorarios", ActividadesHorarios.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorariosExcepcionList GetByActividadesHorarios(System.Int32 IdHorario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetByActividadesHorarios", IdHorario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ActividadesHorariosExcepcionList GetByActividadesHorarios(IUniqueIdentifiable ActividadesHorarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetByActividadesHorarios", ActividadesHorarios.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdActividadHorarioExcepcion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ActividadesHorariosExcepcion_Delete", IdActividadHorarioExcepcion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdActividadHorarioExcepcion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ActividadesHorariosExcepcion_Delete", IdActividadHorarioExcepcion);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByActividadesHorarios(System.Int32 IdHorario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ActividadesHorariosExcepcion_DeleteByActividadesHorarios", IdHorario);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByActividadesHorarios(DbTransaction transaction, System.Int32 IdHorario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ActividadesHorariosExcepcion_DeleteByActividadesHorarios", IdHorario);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByActividadesHorarios(IUniqueIdentifiable ActividadesHorarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ActividadesHorariosExcepcion_DeleteByActividadesHorarios", ActividadesHorarios.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByActividadesHorarios(DbTransaction transaction, IUniqueIdentifiable ActividadesHorarios)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ActividadesHorariosExcepcion_DeleteByActividadesHorarios", ActividadesHorarios.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace monaguaRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ActividadesHorariosExcepcionMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public monaguaRules.Mappers.ActividadesHorariosExcepcionMapper Instance()
        {
            return monaguaRules.Mappers.ActividadesHorariosExcepcionMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ActividadesHorariosExcepcionEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ActividadesHorariosExcepcion GetOne(System.Int32 IdActividadHorarioExcepcion) {
            return Instance().GetOne( IdActividadHorarioExcepcion);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ActividadesHorariosExcepcionList by calling a Stored Procedure
        /// </summary>
        public Entities.ActividadesHorariosExcepcionList GetByActividadesHorarios(System.Int32 IdHorario)
        {
            return Instance().GetByActividadesHorarios(IdHorario);
        }

        /// <summary>
        /// Get a ActividadesHorariosExcepcionList by calling a Stored Procedure
        /// </summary>
        public Entities.ActividadesHorariosExcepcionList GetByActividadesHorarios(IUniqueIdentifiable ActividadesHorarios)
        {
            return Instance().GetByActividadesHorarios(ActividadesHorarios);
        }

    

       

        /// <summary>
        /// Delete children for ActividadesHorariosExcepcion
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ActividadesHorariosExcepcion entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ActividadesHorariosExcepcion by ActividadesHorarios
        /// </summary>
        public void DeleteByActividadesHorarios(System.Int32 IdHorario)
        {
            Instance().DeleteByActividadesHorarios(IdHorario);
        }

        /// <summary>
        /// Delete ActividadesHorariosExcepcion by ActividadesHorarios
        /// </summary>
        public void DeleteByActividadesHorarios(IUniqueIdentifiable ActividadesHorarios)
        {
            Instance().DeleteByActividadesHorarios(ActividadesHorarios);
        }

    
        /// <summary>
        /// Delete ActividadesHorariosExcepcion 
        /// </summary>
        public void Delete(System.Int32 IdActividadHorarioExcepcion){
            Instance().Delete(IdActividadHorarioExcepcion);
        }

        /// <summary>
        /// Delete ActividadesHorariosExcepcion 
        /// </summary>
        public void Delete(Entities.ActividadesHorariosExcepcion entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ActividadesHorariosExcepcion  
        /// </summary>
        public void Save(Entities.ActividadesHorariosExcepcion entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ActividadesHorariosExcepcion 
        /// </summary>
        public void Insert(Entities.ActividadesHorariosExcepcion entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ActividadesHorariosExcepcion 
        /// </summary>
        public Entities.ActividadesHorariosExcepcionList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ActividadesHorariosExcepcion 
        /// </summary>
        public void Save(System.Int32 IdActividadHorarioExcepcion, System.Int32 IdHorario, System.DateTime HoraDesde, System.DateTime HoraHasta, System.Int32 Capacidad, System.Boolean Eliminar, System.DateTime Fecha){
            Entities.ActividadesHorariosExcepcion entity = Instance().GetOne(IdActividadHorarioExcepcion);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdActividadHorarioExcepcion", IdActividadHorarioExcepcion));

            entity.IdHorario = IdHorario;
            entity.HoraDesde = HoraDesde;
            entity.HoraHasta = HoraHasta;
            entity.Capacidad = Capacidad;
            entity.Eliminar = Eliminar;
            entity.Fecha = Fecha;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ActividadesHorariosExcepcion
        /// </summary>
        public void Insert(System.Int32 IdHorario, System.DateTime HoraDesde, System.DateTime HoraHasta, System.Int32 Capacidad, System.Boolean Eliminar, System.DateTime Fecha){
            Entities.ActividadesHorariosExcepcion entity = new Entities.ActividadesHorariosExcepcion();

            entity.IdHorario = IdHorario;
            entity.HoraDesde = HoraDesde;
            entity.HoraHasta = HoraHasta;
            entity.Capacidad = Capacidad;
            entity.Eliminar = Eliminar;
            entity.Fecha = Fecha;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace monaguaRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ActividadesHorariosExcepcionLoader<T> : BaseLoader< T, ActividadesHorariosExcepcion, ObjectList<T>>, IGenericGateway where T : ActividadesHorariosExcepcion, new()
    {

        #region "Singleton"

        static ActividadesHorariosExcepcionLoader<T> _instance;

        private ActividadesHorariosExcepcionLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ActividadesHorariosExcepcionLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ActividadesHorariosExcepcionLoader<T>();
                else {
                    ActividadesHorariosExcepcionLoader<T> inst = HttpContext.Current.Items["monaguaRules.ActividadesHorariosExcepcionLoaderSingleton"] as ActividadesHorariosExcepcionLoader<T>;
                    if (inst == null) {
                        inst = new ActividadesHorariosExcepcionLoader<T>();
                        HttpContext.Current.Items.Add("monaguaRules.ActividadesHorariosExcepcionLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdActividadHorarioExcepcion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ActividadesHorariosExcepcion);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ActividadesHorariosExcepcion"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ActividadesHorariosExcepcion entity)
        {
            
            IMappeableActividadesHorariosExcepcionObject ActividadesHorariosExcepcion = (IMappeableActividadesHorariosExcepcionObject)entity;
            ActividadesHorariosExcepcion.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(2),
(reader.IsDBNull(3)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(3),
(reader.IsDBNull(4)) ? new System.Nullable<System.Int32>() : reader.GetInt32(4),
reader.GetBoolean(5),
(reader.IsDBNull(6)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.ActividadesHorarios ActividadesHorariosEntity = null; // Lazy load
            ((IMappeableActividadesHorariosExcepcion)entity).CompleteEntity(ActividadesHorariosEntity);
        }


        



        /// <summary>
        /// Get a ActividadesHorariosExcepcion by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ActividadesHorariosExcepcionList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdActividadHorarioExcepcion)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetOne", IdActividadHorarioExcepcion);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByActividadesHorarios(DbTransaction transaction, System.Int32 IdHorario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetByActividadesHorarios", IdHorario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByActividadesHorarios(DbTransaction transaction, IUniqueIdentifiable ActividadesHorarios)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetByActividadesHorarios", ActividadesHorarios.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByActividadesHorarios(System.Int32 IdHorario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetByActividadesHorarios", IdHorario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByActividadesHorarios(IUniqueIdentifiable ActividadesHorarios)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ActividadesHorariosExcepcion_GetByActividadesHorarios", ActividadesHorarios.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





