
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 10/6/2022 - 05:08 p.Â m.
// This is a partial class file. The other one is PrestadoresMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using monaguaRules.Entities;
using monaguaRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace monaguaRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class PrestadoresMapper : BaseGateway<Prestadores, PrestadoresList>, IGenericGateway
    {


        #region "Singleton"

        static PrestadoresMapper _instance;

        private PrestadoresMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PrestadoresMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PrestadoresMapper();
                else {
                    PrestadoresMapper inst = HttpContext.Current.Items["monaguaRules.PrestadoresMapperSingleton"] as PrestadoresMapper;
                    if (inst == null) {
                        inst = new PrestadoresMapper();
                        HttpContext.Current.Items.Add("monaguaRules.PrestadoresMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdPrestador"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Prestadores);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Prestadores"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(PrestadoresMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Prestadores entity)
        {
            
            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            Prestadores.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetString(3),
reader.GetInt32(4),
reader.GetInt32(5),
reader.GetInt32(6),
reader.GetString(7),
reader.GetString(8),
reader.GetDateTime(9),
reader.GetBoolean(10),
reader.GetBoolean(11),
reader.GetBoolean(12),
reader.GetString(13));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(Prestadores entity)
        {

            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            return Prestadores.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(Prestadores entity)
        {

            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            return Prestadores.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(Prestadores entity)
        {

            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            return Prestadores.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Prestadores entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeablePrestadoresObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Prestadores entity)
        {
            Entities.Localidades LocalidadesEntity = null; // Lazy load
Entities.Paises PaisesEntity = null; // Lazy load
Entities.Provincias ProvinciasEntity = null; // Lazy load
            ((IMappeablePrestadores)entity).CompleteEntity(LocalidadesEntity, PaisesEntity, ProvinciasEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a Prestadores by execute a SQL Query Text
        /// </summary>
        public Prestadores GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PrestadoresList by execute a SQL Query Text
        /// </summary>
        public PrestadoresList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public Prestadores GetOne(System.Int32 IdPrestador)
        {
            return base.GetOne(new Prestadores(IdPrestador));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByLocalidades(DbTransaction transaction, System.Int32 IdLocalidad)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByLocalidades(DbTransaction transaction, IUniqueIdentifiable Localidades)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByLocalidades", Localidades.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByPaises(DbTransaction transaction, System.Int32 IdPais)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByPaises", IdPais);
        }

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByPaises(DbTransaction transaction, IUniqueIdentifiable Paises)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByPaises", Paises.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByProvincias(DbTransaction transaction, System.Int32 IdProvincia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByProvincias", IdProvincia);
        }

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByProvincias(DbTransaction transaction, IUniqueIdentifiable Provincias)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByProvincias", Provincias.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByLocalidades(System.Int32 IdLocalidad)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByLocalidades(IUniqueIdentifiable Localidades)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByLocalidades", Localidades.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByPaises(System.Int32 IdPais)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByPaises", IdPais);
        }

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByPaises(IUniqueIdentifiable Paises)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByPaises", Paises.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByProvincias(System.Int32 IdProvincia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByProvincias", IdProvincia);
        }

        /// <summary>
        /// 
        /// </summary>
        public PrestadoresList GetByProvincias(IUniqueIdentifiable Provincias)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByProvincias", Provincias.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdPrestador)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_Delete", IdPrestador);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdPrestador)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_Delete", IdPrestador);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByLocalidades(System.Int32 IdLocalidad)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByLocalidades(DbTransaction transaction, System.Int32 IdLocalidad)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByLocalidades", IdLocalidad);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByLocalidades(IUniqueIdentifiable Localidades)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByLocalidades", Localidades.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByLocalidades(DbTransaction transaction, IUniqueIdentifiable Localidades)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByLocalidades", Localidades.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPaises(System.Int32 IdPais)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByPaises", IdPais);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPaises(DbTransaction transaction, System.Int32 IdPais)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByPaises", IdPais);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPaises(IUniqueIdentifiable Paises)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByPaises", Paises.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPaises(DbTransaction transaction, IUniqueIdentifiable Paises)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByPaises", Paises.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByProvincias(System.Int32 IdProvincia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByProvincias", IdProvincia);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByProvincias(DbTransaction transaction, System.Int32 IdProvincia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByProvincias", IdProvincia);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByProvincias(IUniqueIdentifiable Provincias)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByProvincias", Provincias.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByProvincias(DbTransaction transaction, IUniqueIdentifiable Provincias)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByProvincias", Provincias.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace monaguaRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class PrestadoresMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public monaguaRules.Mappers.PrestadoresMapper Instance()
        {
            return monaguaRules.Mappers.PrestadoresMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a PrestadoresEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Prestadores GetOne(System.Int32 IdPrestador) {
            return Instance().GetOne( IdPrestador);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a PrestadoresList by calling a Stored Procedure
        /// </summary>
        public Entities.PrestadoresList GetByLocalidades(System.Int32 IdLocalidad)
        {
            return Instance().GetByLocalidades(IdLocalidad);
        }

        /// <summary>
        /// Get a PrestadoresList by calling a Stored Procedure
        /// </summary>
        public Entities.PrestadoresList GetByLocalidades(IUniqueIdentifiable Localidades)
        {
            return Instance().GetByLocalidades(Localidades);
        }

    

        /// <summary>
        /// Get a PrestadoresList by calling a Stored Procedure
        /// </summary>
        public Entities.PrestadoresList GetByPaises(System.Int32 IdPais)
        {
            return Instance().GetByPaises(IdPais);
        }

        /// <summary>
        /// Get a PrestadoresList by calling a Stored Procedure
        /// </summary>
        public Entities.PrestadoresList GetByPaises(IUniqueIdentifiable Paises)
        {
            return Instance().GetByPaises(Paises);
        }

    

        /// <summary>
        /// Get a PrestadoresList by calling a Stored Procedure
        /// </summary>
        public Entities.PrestadoresList GetByProvincias(System.Int32 IdProvincia)
        {
            return Instance().GetByProvincias(IdProvincia);
        }

        /// <summary>
        /// Get a PrestadoresList by calling a Stored Procedure
        /// </summary>
        public Entities.PrestadoresList GetByProvincias(IUniqueIdentifiable Provincias)
        {
            return Instance().GetByProvincias(Provincias);
        }

    

       

        /// <summary>
        /// Delete children for Prestadores
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Prestadores entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete Prestadores by Localidades
        /// </summary>
        public void DeleteByLocalidades(System.Int32 IdLocalidad)
        {
            Instance().DeleteByLocalidades(IdLocalidad);
        }

        /// <summary>
        /// Delete Prestadores by Localidades
        /// </summary>
        public void DeleteByLocalidades(IUniqueIdentifiable Localidades)
        {
            Instance().DeleteByLocalidades(Localidades);
        }

    

        /// <summary>
        /// Delete Prestadores by Paises
        /// </summary>
        public void DeleteByPaises(System.Int32 IdPais)
        {
            Instance().DeleteByPaises(IdPais);
        }

        /// <summary>
        /// Delete Prestadores by Paises
        /// </summary>
        public void DeleteByPaises(IUniqueIdentifiable Paises)
        {
            Instance().DeleteByPaises(Paises);
        }

    

        /// <summary>
        /// Delete Prestadores by Provincias
        /// </summary>
        public void DeleteByProvincias(System.Int32 IdProvincia)
        {
            Instance().DeleteByProvincias(IdProvincia);
        }

        /// <summary>
        /// Delete Prestadores by Provincias
        /// </summary>
        public void DeleteByProvincias(IUniqueIdentifiable Provincias)
        {
            Instance().DeleteByProvincias(Provincias);
        }

    
        /// <summary>
        /// Delete Prestadores 
        /// </summary>
        public void Delete(System.Int32 IdPrestador){
            Instance().Delete(IdPrestador);
        }

        /// <summary>
        /// Delete Prestadores 
        /// </summary>
        public void Delete(Entities.Prestadores entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Prestadores  
        /// </summary>
        public void Save(Entities.Prestadores entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Prestadores 
        /// </summary>
        public void Insert(Entities.Prestadores entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll Prestadores 
        /// </summary>
        public Entities.PrestadoresList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save Prestadores 
        /// </summary>
        public void Save(System.Int32 IdPrestador, System.String RazonSocial, System.String NombreFantasia, System.String Cuit, System.Int32 IdPais, System.Int32 IdProvincia, System.Int32 IdLocalidad, System.String Email, System.String Logo, System.DateTime FechaRegistro, System.Boolean PrestadorHabilitado, System.Boolean Politicas, System.Boolean Activo, System.String Telefono){
            Entities.Prestadores entity = Instance().GetOne(IdPrestador);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdPrestador", IdPrestador));

            entity.RazonSocial = RazonSocial;
            entity.NombreFantasia = NombreFantasia;
            entity.Cuit = Cuit;
            entity.IdPais = IdPais;
            entity.IdProvincia = IdProvincia;
            entity.IdLocalidad = IdLocalidad;
            entity.Email = Email;
            entity.Logo = Logo;
            entity.FechaRegistro = FechaRegistro;
            entity.PrestadorHabilitado = PrestadorHabilitado;
            entity.Politicas = Politicas;
            entity.Activo = Activo;
            entity.Telefono = Telefono;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Prestadores
        /// </summary>
        public void Insert(System.String RazonSocial, System.String NombreFantasia, System.String Cuit, System.Int32 IdPais, System.Int32 IdProvincia, System.Int32 IdLocalidad, System.String Email, System.String Logo, System.DateTime FechaRegistro, System.Boolean PrestadorHabilitado, System.Boolean Politicas, System.Boolean Activo, System.String Telefono){
            Entities.Prestadores entity = new Entities.Prestadores();

            entity.RazonSocial = RazonSocial;
            entity.NombreFantasia = NombreFantasia;
            entity.Cuit = Cuit;
            entity.IdPais = IdPais;
            entity.IdProvincia = IdProvincia;
            entity.IdLocalidad = IdLocalidad;
            entity.Email = Email;
            entity.Logo = Logo;
            entity.FechaRegistro = FechaRegistro;
            entity.PrestadorHabilitado = PrestadorHabilitado;
            entity.Politicas = Politicas;
            entity.Activo = Activo;
            entity.Telefono = Telefono;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace monaguaRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class PrestadoresLoader<T> : BaseLoader< T, Prestadores, ObjectList<T>>, IGenericGateway where T : Prestadores, new()
    {

        #region "Singleton"

        static PrestadoresLoader<T> _instance;

        private PrestadoresLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PrestadoresLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PrestadoresLoader<T>();
                else {
                    PrestadoresLoader<T> inst = HttpContext.Current.Items["monaguaRules.PrestadoresLoaderSingleton"] as PrestadoresLoader<T>;
                    if (inst == null) {
                        inst = new PrestadoresLoader<T>();
                        HttpContext.Current.Items.Add("monaguaRules.PrestadoresLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdPrestador"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Prestadores);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Prestadores"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Prestadores entity)
        {
            
            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            Prestadores.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetString(3),
reader.GetInt32(4),
reader.GetInt32(5),
reader.GetInt32(6),
reader.GetString(7),
reader.GetString(8),
reader.GetDateTime(9),
reader.GetBoolean(10),
reader.GetBoolean(11),
reader.GetBoolean(12),
reader.GetString(13));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.Localidades LocalidadesEntity = null; // Lazy load
Entities.Paises PaisesEntity = null; // Lazy load
Entities.Provincias ProvinciasEntity = null; // Lazy load
            ((IMappeablePrestadores)entity).CompleteEntity(LocalidadesEntity, PaisesEntity, ProvinciasEntity);
        }


        



        /// <summary>
        /// Get a Prestadores by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PrestadoresList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdPrestador)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetOne", IdPrestador);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByLocalidades(DbTransaction transaction, System.Int32 IdLocalidad)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByLocalidades(DbTransaction transaction, IUniqueIdentifiable Localidades)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByLocalidades", Localidades.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPaises(DbTransaction transaction, System.Int32 IdPais)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByPaises", IdPais);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPaises(DbTransaction transaction, IUniqueIdentifiable Paises)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByPaises", Paises.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByProvincias(DbTransaction transaction, System.Int32 IdProvincia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByProvincias", IdProvincia);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByProvincias(DbTransaction transaction, IUniqueIdentifiable Provincias)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByProvincias", Provincias.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByLocalidades(System.Int32 IdLocalidad)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByLocalidades(IUniqueIdentifiable Localidades)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByLocalidades", Localidades.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPaises(System.Int32 IdPais)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByPaises", IdPais);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPaises(IUniqueIdentifiable Paises)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByPaises", Paises.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByProvincias(System.Int32 IdProvincia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByProvincias", IdProvincia);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByProvincias(IUniqueIdentifiable Provincias)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByProvincias", Provincias.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





