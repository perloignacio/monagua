
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 10/6/2022 - 05:08 p.Â m.
// This is a partial class file. The other one is CalificacionesMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using monaguaRules.Entities;
using monaguaRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace monaguaRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class CalificacionesMapper : BaseGateway<Calificaciones, CalificacionesList>, IGenericGateway
    {


        #region "Singleton"

        static CalificacionesMapper _instance;

        private CalificacionesMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static CalificacionesMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new CalificacionesMapper();
                else {
                    CalificacionesMapper inst = HttpContext.Current.Items["monaguaRules.CalificacionesMapperSingleton"] as CalificacionesMapper;
                    if (inst == null) {
                        inst = new CalificacionesMapper();
                        HttpContext.Current.Items.Add("monaguaRules.CalificacionesMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdCalificacion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Calificaciones);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Calificaciones"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(CalificacionesMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Calificaciones entity)
        {
            
            IMappeableCalificacionesObject Calificaciones = (IMappeableCalificacionesObject)entity;
            Calificaciones.HydrateFields(
            reader.GetInt32(0),
reader.GetDateTime(1),
reader.GetInt32(2),
reader.GetInt32(3),
reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(Calificaciones entity)
        {

            IMappeableCalificacionesObject Calificaciones = (IMappeableCalificacionesObject)entity;
            return Calificaciones.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(Calificaciones entity)
        {

            IMappeableCalificacionesObject Calificaciones = (IMappeableCalificacionesObject)entity;
            return Calificaciones.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(Calificaciones entity)
        {

            IMappeableCalificacionesObject Calificaciones = (IMappeableCalificacionesObject)entity;
            return Calificaciones.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Calificaciones entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableCalificacionesObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Calificaciones entity)
        {
            Entities.ComprasDetalle ComprasDetalleEntity = null; // Lazy load
            ((IMappeableCalificaciones)entity).CompleteEntity(ComprasDetalleEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a Calificaciones by execute a SQL Query Text
        /// </summary>
        public Calificaciones GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a CalificacionesList by execute a SQL Query Text
        /// </summary>
        public CalificacionesList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public Calificaciones GetOne(System.Int32 IdCalificacion)
        {
            return base.GetOne(new Calificaciones(IdCalificacion));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public CalificacionesList GetByComprasDetalle(DbTransaction transaction, System.Int32 IdCompraDetalle)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_GetByComprasDetalle", IdCompraDetalle);
        }

        /// <summary>
        /// 
        /// </summary>
        public CalificacionesList GetByComprasDetalle(DbTransaction transaction, IUniqueIdentifiable ComprasDetalle)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_GetByComprasDetalle", ComprasDetalle.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public CalificacionesList GetByComprasDetalle(System.Int32 IdCompraDetalle)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Calificaciones_GetByComprasDetalle", IdCompraDetalle);
        }

        /// <summary>
        /// 
        /// </summary>
        public CalificacionesList GetByComprasDetalle(IUniqueIdentifiable ComprasDetalle)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Calificaciones_GetByComprasDetalle", ComprasDetalle.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdCalificacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Calificaciones_Delete", IdCalificacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdCalificacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_Delete", IdCalificacion);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByComprasDetalle(System.Int32 IdCompraDetalle)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Calificaciones_DeleteByComprasDetalle", IdCompraDetalle);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByComprasDetalle(DbTransaction transaction, System.Int32 IdCompraDetalle)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_DeleteByComprasDetalle", IdCompraDetalle);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByComprasDetalle(IUniqueIdentifiable ComprasDetalle)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Calificaciones_DeleteByComprasDetalle", ComprasDetalle.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByComprasDetalle(DbTransaction transaction, IUniqueIdentifiable ComprasDetalle)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_DeleteByComprasDetalle", ComprasDetalle.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public CalificacionesList GetCalificacionesByCliente(System.Int32 idcliente) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Calificaciones_GetCalificacionesByCliente" , idcliente);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public CalificacionesList GetCalificacionesByCliente(DbTransaction transaction , System.Int32 idcliente) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_GetCalificacionesByCliente" , idcliente);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace monaguaRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class CalificacionesMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public monaguaRules.Mappers.CalificacionesMapper Instance()
        {
            return monaguaRules.Mappers.CalificacionesMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a CalificacionesEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Calificaciones GetOne(System.Int32 IdCalificacion) {
            return Instance().GetOne( IdCalificacion);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a CalificacionesList by calling a Stored Procedure
        /// </summary>
        public Entities.CalificacionesList GetByComprasDetalle(System.Int32 IdCompraDetalle)
        {
            return Instance().GetByComprasDetalle(IdCompraDetalle);
        }

        /// <summary>
        /// Get a CalificacionesList by calling a Stored Procedure
        /// </summary>
        public Entities.CalificacionesList GetByComprasDetalle(IUniqueIdentifiable ComprasDetalle)
        {
            return Instance().GetByComprasDetalle(ComprasDetalle);
        }

    

       

        /// <summary>
        /// Delete children for Calificaciones
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Calificaciones entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete Calificaciones by ComprasDetalle
        /// </summary>
        public void DeleteByComprasDetalle(System.Int32 IdCompraDetalle)
        {
            Instance().DeleteByComprasDetalle(IdCompraDetalle);
        }

        /// <summary>
        /// Delete Calificaciones by ComprasDetalle
        /// </summary>
        public void DeleteByComprasDetalle(IUniqueIdentifiable ComprasDetalle)
        {
            Instance().DeleteByComprasDetalle(ComprasDetalle);
        }

    
        /// <summary>
        /// Delete Calificaciones 
        /// </summary>
        public void Delete(System.Int32 IdCalificacion){
            Instance().Delete(IdCalificacion);
        }

        /// <summary>
        /// Delete Calificaciones 
        /// </summary>
        public void Delete(Entities.Calificaciones entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Calificaciones  
        /// </summary>
        public void Save(Entities.Calificaciones entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Calificaciones 
        /// </summary>
        public void Insert(Entities.Calificaciones entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll Calificaciones 
        /// </summary>
        public Entities.CalificacionesList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save Calificaciones 
        /// </summary>
        public void Save(System.Int32 IdCalificacion, System.DateTime Fecha, System.Int32 IdCompraDetalle, System.Int32 Calificacion, System.String Comentario, System.String Respuesta, System.DateTime FechaRespuesta){
            Entities.Calificaciones entity = Instance().GetOne(IdCalificacion);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdCalificacion", IdCalificacion));

            entity.Fecha = Fecha;
            entity.IdCompraDetalle = IdCompraDetalle;
            entity.Calificacion = Calificacion;
            entity.Comentario = Comentario;
            entity.Respuesta = Respuesta;
            entity.FechaRespuesta = FechaRespuesta;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Calificaciones
        /// </summary>
        public void Insert(System.DateTime Fecha, System.Int32 IdCompraDetalle, System.Int32 Calificacion, System.String Comentario, System.String Respuesta, System.DateTime FechaRespuesta){
            Entities.Calificaciones entity = new Entities.Calificaciones();

            entity.Fecha = Fecha;
            entity.IdCompraDetalle = IdCompraDetalle;
            entity.Calificacion = Calificacion;
            entity.Comentario = Comentario;
            entity.Respuesta = Respuesta;
            entity.FechaRespuesta = FechaRespuesta;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public CalificacionesList GetCalificacionesByCliente(System.Int32 idcliente) {
            
                return Instance().GetCalificacionesByCliente( idcliente);
        }


        


    }
}





namespace monaguaRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class CalificacionesLoader<T> : BaseLoader< T, Calificaciones, ObjectList<T>>, IGenericGateway where T : Calificaciones, new()
    {

        #region "Singleton"

        static CalificacionesLoader<T> _instance;

        private CalificacionesLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static CalificacionesLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new CalificacionesLoader<T>();
                else {
                    CalificacionesLoader<T> inst = HttpContext.Current.Items["monaguaRules.CalificacionesLoaderSingleton"] as CalificacionesLoader<T>;
                    if (inst == null) {
                        inst = new CalificacionesLoader<T>();
                        HttpContext.Current.Items.Add("monaguaRules.CalificacionesLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdCalificacion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Calificaciones);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Calificaciones"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Calificaciones entity)
        {
            
            IMappeableCalificacionesObject Calificaciones = (IMappeableCalificacionesObject)entity;
            Calificaciones.HydrateFields(
            reader.GetInt32(0),
reader.GetDateTime(1),
reader.GetInt32(2),
reader.GetInt32(3),
reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.ComprasDetalle ComprasDetalleEntity = null; // Lazy load
            ((IMappeableCalificaciones)entity).CompleteEntity(ComprasDetalleEntity);
        }


        



        /// <summary>
        /// Get a Calificaciones by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a CalificacionesList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdCalificacion)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Calificaciones_GetOne", IdCalificacion);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByComprasDetalle(DbTransaction transaction, System.Int32 IdCompraDetalle)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_GetByComprasDetalle", IdCompraDetalle);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByComprasDetalle(DbTransaction transaction, IUniqueIdentifiable ComprasDetalle)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_GetByComprasDetalle", ComprasDetalle.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByComprasDetalle(System.Int32 IdCompraDetalle)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Calificaciones_GetByComprasDetalle", IdCompraDetalle);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByComprasDetalle(IUniqueIdentifiable ComprasDetalle)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Calificaciones_GetByComprasDetalle", ComprasDetalle.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetCalificacionesByCliente(System.Int32 idcliente) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Calificaciones_GetCalificacionesByCliente" , idcliente);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetCalificacionesByCliente(DbTransaction transaction , System.Int32 idcliente) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Calificaciones_GetCalificacionesByCliente" , idcliente);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





