
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 31/08/2022 - 14:49
// This is a partial class file. The other one is PrestadoresGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using monaguaRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace monaguaRules.Gateways
{

    public partial class PrestadoresGateway : BaseGateway<PrestadoresObject, PrestadoresObjectList>, IGenericGateway
    {

        #region "Singleton"

        static PrestadoresGateway _instance;

        private PrestadoresGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static PrestadoresGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PrestadoresGateway();
                else {
                    PrestadoresGateway inst = HttpContext.Current.Items["monaguaRules.PrestadoresGatewaySingleton"] as PrestadoresGateway;
                    if (inst == null) {
                        inst = new PrestadoresGateway();
                        HttpContext.Current.Items.Add("monaguaRules.PrestadoresGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Prestadores"; }
        }

        protected override string RuleName
        {
            get {return typeof(PrestadoresGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PrestadoresObject entity)
        {
            
            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            Prestadores.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetString(3),
reader.GetInt32(4),
reader.GetInt32(5),
reader.GetInt32(6),
reader.GetString(7),
reader.GetString(8),
reader.GetDateTime(9),
reader.GetBoolean(10),
reader.GetBoolean(11),
reader.GetBoolean(12),
reader.GetString(13));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(PrestadoresObject entity)
        {

            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            return Prestadores.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(PrestadoresObject entity)
        {

            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            return Prestadores.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(PrestadoresObject entity)
        {

            IMappeablePrestadoresObject Prestadores = (IMappeablePrestadoresObject)entity;
            return Prestadores.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(PrestadoresObject row, object[] parameters)
        {
            ((IMappeablePrestadoresObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a PrestadoresObject by execute a SQL Query Text
        /// </summary>
        public PrestadoresObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PrestadoresObjectList by execute a SQL Query Text
        /// </summary>
        public PrestadoresObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a PrestadoresObject by calling a Stored Procedure
        /// </summary>
        public PrestadoresObject GetOne(System.Int32 IdPrestador)
        {
            return base.GetOne(new PrestadoresObject(IdPrestador));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByLocalidades(DbTransaction transaction,System.Int32 IdLocalidad)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByLocalidades(DbTransaction transaction, IUniqueIdentifiable Localidades)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByLocalidades", Localidades.Identifier());
        }

    

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByPaises(DbTransaction transaction,System.Int32 IdPais)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByPaises", IdPais);
        }

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByPaises(DbTransaction transaction, IUniqueIdentifiable Paises)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByPaises", Paises.Identifier());
        }

    

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByProvincias(DbTransaction transaction,System.Int32 IdProvincia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByProvincias", IdProvincia);
        }

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByProvincias(DbTransaction transaction, IUniqueIdentifiable Provincias)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_GetByProvincias", Provincias.Identifier());
        }

    

        

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByLocalidades(System.Int32 IdLocalidad)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByLocalidades(IUniqueIdentifiable Localidades)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByLocalidades", Localidades.Identifier());
        }

    

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByPaises(System.Int32 IdPais)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByPaises", IdPais);
        }

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByPaises(IUniqueIdentifiable Paises)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByPaises", Paises.Identifier());
        }

    

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByProvincias(System.Int32 IdProvincia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByProvincias", IdProvincia);
        }

        /// <summary>
        /// Get a PrestadoresObjectList by calling a Stored Procedure
        /// </summary>
        public PrestadoresObjectList GetByProvincias(IUniqueIdentifiable Provincias)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Prestadores_GetByProvincias", Provincias.Identifier());
        }

    

        /// <summary>
        /// Delete Prestadores
        /// </summary>
        public void Delete(System.Int32 IdPrestador)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_Delete", IdPrestador);
        }

        /// <summary>
        /// Delete Prestadores
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdPrestador)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_Delete", IdPrestador);
        }

            

        

        /// <summary>
        /// Delete Prestadores by Localidades
        /// </summary>
        public void DeleteByLocalidades(System.Int32 IdLocalidad)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// Delete Prestadores by Localidades
        /// </summary>
        public void DeleteByLocalidades(DbTransaction transaction, System.Int32 IdLocalidad)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByLocalidades", IdLocalidad);
        }

        /// <summary>
        /// Delete Prestadores by Localidades
        /// </summary>
        public void DeleteByLocalidades(IUniqueIdentifiable Localidades)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByLocalidades", Localidades.Identifier());
        }

        /// <summary>
        /// Delete Prestadores by Localidades
        /// </summary>
        public void DeleteByLocalidades(DbTransaction transaction, IUniqueIdentifiable Localidades)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByLocalidades", Localidades.Identifier());
        }


    

        /// <summary>
        /// Delete Prestadores by Paises
        /// </summary>
        public void DeleteByPaises(System.Int32 IdPais)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByPaises", IdPais);
        }

        /// <summary>
        /// Delete Prestadores by Paises
        /// </summary>
        public void DeleteByPaises(DbTransaction transaction, System.Int32 IdPais)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByPaises", IdPais);
        }

        /// <summary>
        /// Delete Prestadores by Paises
        /// </summary>
        public void DeleteByPaises(IUniqueIdentifiable Paises)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByPaises", Paises.Identifier());
        }

        /// <summary>
        /// Delete Prestadores by Paises
        /// </summary>
        public void DeleteByPaises(DbTransaction transaction, IUniqueIdentifiable Paises)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByPaises", Paises.Identifier());
        }


    

        /// <summary>
        /// Delete Prestadores by Provincias
        /// </summary>
        public void DeleteByProvincias(System.Int32 IdProvincia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByProvincias", IdProvincia);
        }

        /// <summary>
        /// Delete Prestadores by Provincias
        /// </summary>
        public void DeleteByProvincias(DbTransaction transaction, System.Int32 IdProvincia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByProvincias", IdProvincia);
        }

        /// <summary>
        /// Delete Prestadores by Provincias
        /// </summary>
        public void DeleteByProvincias(IUniqueIdentifiable Provincias)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Prestadores_DeleteByProvincias", Provincias.Identifier());
        }

        /// <summary>
        /// Delete Prestadores by Provincias
        /// </summary>
        public void DeleteByProvincias(DbTransaction transaction, IUniqueIdentifiable Provincias)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Prestadores_DeleteByProvincias", Provincias.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








