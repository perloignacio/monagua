
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 08/09/2022 - 16:50
// This is a partial class file. The other one is ActividadesEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using monaguaRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace monaguaRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class Actividades : Objects.ActividadesObject, IMappeableActividades, IEquatable<Actividades>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public Actividades()
            :base()
        {
            if (_CategoriasEntity == null) _CategoriasEntity = new Entities.Categorias();
if (_PrestadoresEntity == null) _PrestadoresEntity = new Entities.Prestadores();

        }

        /// <summary>
        /// 
        /// </summary>
        public Actividades(
			System.Int32 IdActividad)
            : base()
        {

			_IdActividad = IdActividad;

            if (_CategoriasEntity == null) _CategoriasEntity = new Entities.Categorias();
if (_PrestadoresEntity == null) _PrestadoresEntity = new Entities.Prestadores();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public Actividades(
			System.Int32 IdActividad,
			System.String Nombre,
			System.String DescripcionCorta,
			System.String Descripcion,
			System.String Fotos,
			System.String Video,
			System.String Ubicacion,
			System.Decimal Precio,
			System.Nullable<System.Decimal> PrecioOferta,
			System.Boolean Mascotas,
			System.Boolean PersonasCapacidadRed,
			System.Boolean DietasEspeciales,
			System.String Idiomas,
			System.String Dificultad,
			System.String QueIncluye,
			System.String QueNoIncluye,
			System.Decimal Duracion,
			System.Int32 IdCategoria,
			System.Int32 IdPrestador,
			System.Boolean Activa,
			System.String Mapa,
			System.Boolean CancelacionGratuita)
            : base()
        {

			_IdActividad = IdActividad;
			_Nombre = Nombre;
			_DescripcionCorta = DescripcionCorta;
			_Descripcion = Descripcion;
			_Fotos = Fotos;
			_Video = Video;
			_Ubicacion = Ubicacion;
			_Precio = Precio;
			_PrecioOferta = PrecioOferta;
			_Mascotas = Mascotas;
			_PersonasCapacidadRed = PersonasCapacidadRed;
			_DietasEspeciales = DietasEspeciales;
			_Idiomas = Idiomas;
			_Dificultad = Dificultad;
			_QueIncluye = QueIncluye;
			_QueNoIncluye = QueNoIncluye;
			_Duracion = Duracion;
			_IdCategoria = IdCategoria;
			_IdPrestador = IdPrestador;
			_Activa = Activa;
			_Mapa = Mapa;
			_CancelacionGratuita = CancelacionGratuita;

            if (_CategoriasEntity == null) _CategoriasEntity = new Entities.Categorias();
if (_PrestadoresEntity == null) _PrestadoresEntity = new Entities.Prestadores();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.Categorias _CategoriasEntity;
/// <summary>
/// 
/// </summary>
protected Entities.Prestadores _PrestadoresEntity;

        #endregion

        #region "Properties"
        
bool _CategoriasEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Categorias CategoriasEntity
        {
            get
            {
                if (_CategoriasEntity== null  && ! _CategoriasEntityFetched ) {
_CategoriasEntityFetched = true;
Entities.Categorias _CategoriasEntityTemp = new Entities.Categorias(this.IdCategoria); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Categorias));
 _CategoriasEntity = lazyProvider.GetEntity(typeof(Entities.Categorias), _CategoriasEntityTemp) as Entities.Categorias;
}

                return _CategoriasEntity;
            }
            set
            {
                base.PropertyModified();
                _CategoriasEntity = value;
                if (value != null) {
   _IdCategoria = value.IdCategoria;

} else {
   _IdCategoria = System.Int32.MinValue;

}

            }
        }
        
bool _PrestadoresEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Prestadores PrestadoresEntity
        {
            get
            {
                if (_PrestadoresEntity== null  && ! _PrestadoresEntityFetched ) {
_PrestadoresEntityFetched = true;
Entities.Prestadores _PrestadoresEntityTemp = new Entities.Prestadores(this.IdPrestador); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Prestadores));
 _PrestadoresEntity = lazyProvider.GetEntity(typeof(Entities.Prestadores), _PrestadoresEntityTemp) as Entities.Prestadores;
}

                return _PrestadoresEntity;
            }
            set
            {
                base.PropertyModified();
                _PrestadoresEntity = value;
                if (value != null) {
   _IdPrestador = value.IdPrestador;

} else {
   _IdPrestador = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new Actividades OriginalValue()
        {
            return (Actividades)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            Actividades newObject;            
            

            newObject = (Actividades)this.MemberwiseClone();
            // Entities
                         
            if (this._CategoriasEntity != null)
            {
                newObject._CategoriasEntity = (Entities.Categorias)((ICloneable)this._CategoriasEntity).Clone();
            }
                         
            if (this._PrestadoresEntity != null)
            {
                newObject._PrestadoresEntity = (Entities.Prestadores)((ICloneable)this._PrestadoresEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            Actividades newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (Actividades)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._CategoriasEntity != null)
                {
                    newOriginalValue._CategoriasEntity = (Entities.Categorias)((ICloneable)this.OriginalValue()._CategoriasEntity).Clone();
                }
                             
                if (this.OriginalValue()._PrestadoresEntity != null)
                {
                    newOriginalValue._PrestadoresEntity = (Entities.Prestadores)((ICloneable)this.OriginalValue()._PrestadoresEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableActividades.CompleteEntity(Entities.Categorias CategoriasEntity, Entities.Prestadores PrestadoresEntity)
        {
        _CategoriasEntity = CategoriasEntity;
_PrestadoresEntity = PrestadoresEntity;
        }
        
        bool IMappeableActividades.IsCategoriasEntityNull()
        {
            return (_CategoriasEntity == null);
        }
        
        bool IMappeableActividades.IsPrestadoresEntityNull()
        {
            return (_PrestadoresEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableActividades.SetFKValuesForChilds(Actividades entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(Actividades other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableActividades
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.Categorias CategoriasEntity, Entities.Prestadores PrestadoresEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsCategoriasEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsPrestadoresEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(Actividades entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class ActividadesList : ObjectList<Actividades>
    {
    }
}
namespace monaguaRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class ActividadesListView
        : ObjectListView<Entities.Actividades>
    {
        /// <summary>
        /// 
        /// </summary>
        public ActividadesListView(Entities.ActividadesList list): base(list)
        {
        }
    }
}


